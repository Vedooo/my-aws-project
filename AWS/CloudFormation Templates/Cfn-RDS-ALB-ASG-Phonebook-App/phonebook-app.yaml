AWSTemplateFormatVersion: 2010-09-09
Description: |
  CloudFormattion Template for Phonebook Application. This template creates ALB
  with ASG of Amazon Linux 2 ( ami-0cff7528ff583bf9a) EC2 Instances which host Python
  Flask Web Application. EC2 instances are placed within WebServerSecurityGroup which
  allows http (80) connections only from ALSSecurityGroup and allows tcp(3306) connections
  only within itself. RDS DB instance is placed within WebServerSecurityGroup so that DB
  Server can communicate with Web Servers. ALB is placed within ALBSecurityGroup which allows
  http (80) connections from anywhere. WebServerASG Auto Scaling Group is using the WebServerLT
  Launch Template in order to spin up instances needed. WebServerLT Launch Template is configured
  to prepare Python Flask Environment on EC2 and to deploy Phonebook App on Flask Server after
  downloading the app code from GitHub repository.
Parameters:
  
  VPCs:
    Description: VPC Id of your existing account.
    Type: AWS::EC2::VPC::Id 

  KeyPairs:
    Description: Select your Key Pair.
    Type: AWS::EC2::KeyPair::KeyName

  Subnets:
    Description: Choose your subnets.
    Type: List<AWS::EC2::Subnet::Id> 

Resources:
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB Security Group enables to HTTP 
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPCs

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 Security Group enables to SSH for instance and HTTP for Flask Server.
      VpcId: !Ref VPCs
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId #Allows to traffic comes from ALB for HTTP
        
  DbSecurityGroup:
    Type: AWS::RDS::DBSecurityGroup
    Properties:
      GroupDescription: Back-end access to RDS
      DBSecurityGroupIngress:
        - EC2SecurityGroupId: !GetAtt WebServerSecurityGroup.GroupId
   
  WebServerLT:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: ami-0cff7528ff583bf9a
        InstanceType: t2.micro
        KeyName: !Ref KeyPairs
        SecurityGroupIds:
          - !GetAtt WebServerSecurityGroup.GroupId
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub Web Server of ${AWS::StackName} Stack
        UserData: 
          Fn::Base64:
            !Sub
              - |
                #! /bin/bash
                yum update -y
                yum install python3 -y
                pip3 install flask
                pip3 install flask_mysql
                echo "${MyDBURI}" > /home/ec2-user/dbserver.endpoint
                TOKEN="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"
                FOLDER="https://$TOKEN@raw.githubusercontent.com/Vedooo/my-private-projects/main/Project-004-Phonebook-Application"
                curl -s --create-dirs -o "/home/ec2-user/templates/index.html" -L "$FOLDER"/templates/index.html
                curl -s --create-dirs -o "/home/ec2-user/templates/add-update.html" -L "$FOLDER"/templates/add-update.html
                curl -s --create-dirs -o "/home/ec2-user/templates/delete.html" -L "$FOLDER"/templates/delete.html
                curl -s --create-dirs -o "/home/ec2-user/phonebook-app.py" -L "$FOLDER"/phonebook-app.py
                python3 /home/ec2-user/phonebook-app.py
              - MyDBURI: !GetAtt MyDatabaseServer.Endpoint.Address

  WebServerTG:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Port: 80
      Protocol: HTTP
      TargetType: instance
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      VpcId: !Ref VPCs

  ApplicationLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt ALBSecurityGroup.GroupId
      Subnets: !Ref Subnets
      Type: application

  ALBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions: #required
        - TargetGroupArn: !Ref WebServerTG
          Type: forward
      LoadBalancerArn: !Ref ApplicationLoadBalancer #required
      Port: 80 #required
      Protocol: HTTP #required

  WebServerASG:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AvailabilityZones:
        !GetAZs ""
      DesiredCapacity: 2
      HealthCheckGracePeriod: 300
      HealthCheckType: ELB
      LaunchTemplate:
        LaunchTemplateId: !Ref WebServerLT
        Version: !GetAtt WebServerLT.LatestVersionNumber
      MaxSize: 3
      MinSize: 1
      TargetGroupARNs:
        - !Ref WebServerTG

  MyDatabaseServer:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: false
      BackupRetentionPeriod: 0
      DBInstanceClass: db.t2.micro
      DBInstanceIdentifier: phonebook-app-db1
      DBName: clarusway_phonebook
      DBSecurityGroups: 
        - !Ref DbSecurityGroup
      Engine: MySQL
      EngineVersion: 8.0.19
      MasterUsername: admin
      MasterUserPassword: vedovedo0
      Port: 3306
      PubliclyAccessible: true

Outputs:
  WebsiteURL:
    Value: !Sub 
      - http://${ALBAddress}
      - ALBAddress: !GetAtt ApplicationLoadBalancer.DNSName
    Description: Phonebook Application Load Balancer URL